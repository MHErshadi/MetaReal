/**
 * @file parser.h
 * This file contains definitions of the parser that
 * converts the list of tokens generated by lexer into a list of nodes (abstract syntax tree). \n
 * All things defined in \a parser.c and this file have the \a mr_parser prefix.
*/

#ifndef __MR_PARSER__
#define __MR_PARSER__

#include <parser/node.h>
#include <error/error.h>

/**
 * @struct __MR_PARSER_T
 * Result of the \a mr_parser function.
 * @var mr_node_t* __MR_PARSER_T::nodes
 * List of nodes generated by the parser. \n
 * If there is an error in the code (invalid syntax error), the \a nodes list will be NULL.
 * @var mr_long_t __MR_PARSER_T::size
 * Size of the \a nodes list.
 * @var mr_invalid_syntax_t __MR_PARSER_T::error
 * Invalid syntax error (It will be filled with data if the \a nodes list is NULL).
*/
struct __MR_PARSER_T
{
    mr_node_t *nodes;
    mr_long_t size;

    mr_invalid_syntax_t error;
};
typedef struct __MR_PARSER_T mr_parser_t;

/**
 * It creates a list of nodes based on the \a tokens list generated by the lexer. \n
 * If there is an invalid syntax in the code, the function returns an error.
 * @param res
 * Result of the parser process (it contains both error and nodes list).
 * @param tokens
 * The list of tokens generated by the lexer.
 * @param alloc
 * Default allocation size. \n
 * The \a nodes list will be allocated and reallocated with respect to this parameter.
 * @return It returns a code which indicates if the process was successful or not. \n
 * If the process was successful, it returns 0. Otherwise, it returns the error code.
*/
mr_byte_t mr_parser(mr_parser_t *res, mr_token_t *tokens, mr_long_t alloc);

#endif
