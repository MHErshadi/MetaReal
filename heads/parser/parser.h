/*
MIT License

Copyright (c) 2023 MetaReal

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.
*/

/**
 * @file parser.h
 * This file contains definitions of the parser that converts list of tokens generated by lexer into a list of nodes (abstract syntax tree). \n
 * All things defined in \a parser.c and this file have the \a mr_parser prefix.
*/

#ifndef __MR_PARSER__
#define __MR_PARSER__

#include <parser/node.h>
#include <error/error.h>

/**
 * @struct __MR_PARSER_T
 * Result of the \a mr_parser function.
 * @var mr_node_t* __MR_PARSER_T::nodes
 * List of nodes generated by the parser.
 * @var mr_long_t __MR_PARSER_T::size
 * Size of the \a nodes list.
 * @var mr_invalid_syntax_t __MR_PARSER_T::error
 * Invalid syntax error.
*/
struct __MR_PARSER_T
{
    mr_node_t *nodes;
    mr_long_t size;

    mr_invalid_syntax_t error;
};
typedef struct __MR_PARSER_T mr_parser_t;

/**
 * It creates a list of nodes based on the \a tokens list generated by the lexer. \n
 * If there is an invalid syntax in the code, the function returns an error.
 * @param res
 * Result of the parser process (it contains both error and nodes list).
 * @param tokens
 * List of tokens generated by the lexer.
 * @return It returns a code which indicates if the process was successful or not. \n
 * If the process was successful, it returns <em>MR_NOERROR</em>. Otherwise, it returns the error code (defined in \a defs.h header file).
*/
mr_byte_t mr_parser(
    mr_parser_t *res, mr_token_t *tokens);

#endif
