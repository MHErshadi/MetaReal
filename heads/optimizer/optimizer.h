/*
MIT License

Copyright (c) 2023 MetaReal

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.
*/

/**
 * @file optimizer.h
 * This file contains definitions of the optimizer that
 * optimizes the nodes list generated by the parser at compile time.
 * All things defined in \a optimizer.c and this file have the \a mr_optimizer prefix.
*/

#ifndef __MR_OPTIMIZER
#define __MR_OPTIMIZER

#include <optimizer/value.h>
#include <error/error.h>

/**
 * @struct __MR_OPTIMIZER_T
 * Result of the \a mr_optimizer function.
 * @var mr_node_t* __MR_OPTIMIZER_T::values
 * List of values optimized by the optimizer.
 * @var mr_long_t __MR_OPTIMIZER_T::size
 * Size of the \a values list.
 * @var mr_invalid_semantic_t __MR_OPTIMIZER_T::error
 * Invalid semantic error.
*/
#pragma pack(push, 1)
struct __MR_OPTIMIZER_T
{
    mr_node_t *values;
    mr_long_t size;

    mr_invalid_semantic_t error;
};
#pragma pack(pop)
typedef struct __MR_OPTIMIZER_T mr_optimizer_t;

/**
 * It optimizes the \a nodes list passed into it
 * according to the optimization levels and subroutines. \n
 * If there is an invalid semantic in the code, the function returns it.
 * @param res
 * Result of the optimizer process (it contains both error details and values list).
 * @param nodes
 * List of nodes generated by the parser.
 * @param size
 * Size of the \a nodes list.
 * @return
 * It returns a code which indicates if the process was successful or not. \n
 * If the process was successful, it returns <em>MR_NOERROR</em>.
 * Otherwise, it returns the error code (defined in \a defs.h header file).
*/
mr_byte_t mr_optimizer(
    mr_optimizer_t *res, mr_node_t *nodes, mr_long_t size);

#endif
