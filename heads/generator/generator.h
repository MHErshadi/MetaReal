/*
MIT License

Copyright (c) 2023 MetaReal

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.
*/

/**
 * @file generator.h
 * This file contains definitions of generator that generates an assembly output. \n
 * All things defined in \a generator.c and this file have the \a mr_generator prefix.
*/

#ifndef __MR_GENERATOR__
#define __MR_GENERATOR__

#include <parser/node.h>

/**
 * @struct __MR_GENERATOR_T
 * Result of the \a mr_generator function.
 * @var mr_str_t __MR_GENERATOR_T::data
 * Generated assembly code.
 * @var mr_long_t __MR_GENERATOR_T::size
 * Size of the assembly output in characters.
*/
#pragma pack(push, 1)
struct __MR_GENERATOR_T
{
    mr_str_t data;
    mr_long_t size;

    mr_long_t stacksize;
    mr_byte_t ssize;
};
#pragma pack(pop)
typedef struct __MR_GENERATOR_T mr_generator_t;

/**
 * It generates an assembly output based on the list of nodes. \n
 * The list of nodes might be passed into optimizer before entering this function.
 * @param res
 * Result of the generation process.
 * @param nodes
 * List of nodes generated by the parser and optimized by the optimizer.
 * @param size
 * Size of the nodes list.
 * @param alloc
 * Default allocation size for the assembly code. \n
 * This value will also be used to reallocate and expand assembly code string.
 * @return
 * It returns a code which indicates if the process was successful or not. \n
 * If the process was successful, it returns <em>MR_NOERROR</em>.
 * Otherwise, it returns the error code (defined in \a defs.h header file).
 * 
*/
mr_byte_t mr_generator(
    mr_generator_t *res,
    mr_node_t *nodes, mr_long_t size, mr_long_t alloc);

#endif
